apply plugin: 'com.android.application'
apply plugin: 'checkstyle'

dependencies {
    compile 'com.netflix.rxjava:rxjava-core:0.20.+'
    compile 'com.netflix.rxjava:rxjava-android:0.20.+'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.4.+'
    compile 'com.fasterxml.jackson.core:jackson-core:2.4.+'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.4.+'
    compile 'com.squareup.retrofit:retrofit:1.7.+'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'
    compile 'com.squareup.okhttp:okhttp:2.0.0'

    androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.+'
}

android {
    compileSdkVersion 19
    buildToolsVersion "21.1"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }
    signingConfigs {
        release {
            try {
                storeFile file("example.keystore")
                storePassword KEYSTORE_PASSWORD
                keyAlias "client"
                keyPassword KEY_PASSWORD
            } catch (ex) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties")
            }
        }
    }
    buildTypes {
        debug {
            runProguard false
        }
        release {
            signingConfig signingConfigs.release
            runProguard true
            proguardFiles 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
}

task checkstyle(type: Checkstyle) {
    description 'Checks if the code is somewhat acceptable'
    configFile file('./checkstyle.xml')
    source 'src/main/java'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

Properties localProperties = new Properties()
try {
    localProperties.load(project.rootProject.file('local.properties').newDataInputStream())
} catch (ex) {
    throw new InvalidUserDataException("You should define the path to your Android SDK as a property `sdk.dir` in local.properties on the project root."
    )
}

def adb = localProperties.getProperty('sdk.dir') + '/platform-tools/adb'

task runDebug(dependsOn: 'installDebug') {
    description 'Runs the debug-flavour of the app on the connected device'
    doLast {
        exec{commandLine "$adb", "shell", "am", "start", "-n", "tw.steven.project/.MainActivity"}
    }
}

task runRelease(dependsOn: 'installRelease') {
    description 'Runs the release-flavour of the app on the connected device'
    doLast {
        exec{commandLine "$adb", "shell", "am", "start", "-n", "tw.steven.project/.MainActivity"}
    }
}
